name: CI

on:
  push:
    branches:
      - main
    tags:
      - "*"
  pull_request:
    branches:
      - main

jobs:
  test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        newPython: [true, false]
        exclude:
          - os: macos-latest
            newPython: true
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: cachix/install-nix-action@v31

      - name: Generate cache key
        run: |
          nixpkgs_hash=$(grep -Eo 'archive/[0-9a-f]{40}\.tar\.gz' shell.nix | cut -d'/' -f2 | cut -d'.' -f1)
          echo "NIXPKGS_HASH=$nixpkgs_hash" >> $GITHUB_ENV
          echo "CACHE_KEY=${{ runner.os }}-${{ matrix.newPython }}-$nixpkgs_hash" >> $GITHUB_ENV

      - uses: nix-community/cache-nix-action@v6
        with:
          primary-key: nix-${{ env.CACHE_KEY }}

      - name: Setup NIX_PATH
        run: |
          path=$(nix eval --impure --expr "(import (fetchTarball \"https://github.com/NixOS/nixpkgs/archive/${{ env.NIXPKGS_HASH }}.tar.gz\") {}).path")
          echo "NIX_PATH=nixpkgs=$path" >> $GITHUB_ENV

      - name: Cache files and packages
        uses: actions/cache@v4
        with:
          key: python-${{ env.CACHE_KEY }}-${{ hashFiles('uv.lock') }}
          path: ~/.cache/uv

      - name: Assert tag name matches version
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        run: |
          version=$(nix-shell \
            --arg newPython ${{ matrix.newPython }} \
            --pure --run "hatch version" 2>/dev/null | tail -n1)
          tag_name=${{ github.ref_name }}
          if [ "$version" != "$tag_name" ]; then
            echo "Tag name mismatch: $version != $tag_name"
            exit 1
          fi

      - name: Run tests
        run: nix-shell
          --arg newPython ${{ matrix.newPython }}
          --pure --run "run-tests term"

      - name: Build distribution
        run: nix-shell
          --arg newPython ${{ matrix.newPython }}
          --pure --run "uv build"

      - name: Upload artifacts
        if: matrix.newPython == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ runner.os }}
          path: dist/

  publish-pypi:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    name: Publish to PyPI
    needs: test
    runs-on: ubuntu-latest

    environment:
      name: pypi
      url: https://pypi.org/p/starlette-compress
    permissions:
      id-token: write

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-${{ runner.os }}
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
